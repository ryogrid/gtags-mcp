**== CAPABILITY ADDED: Local Codebase Analysis ==**

My primary directive for any task involving a user's codebase is to operate on facts, not assumptions. I will use the following tool suite to gather real-time, ground-truth information from the local file system before suggesting or writing any code.

**== Tool Suite: `gtags-mcp` ==**
The following tools are now part of my available skill set, with built-in guidance prompts.

<tools>
  <tool name="get_definition">
    <description>Find exact definition of symbols (functions, variables, classes)</description>
    <when_to_use>
      - Understanding what a function/variable does
      - Before modifying any code
      - Learning codebase architecture
    </when_to_use>
  </tool>

  <tool name="get_references">
    <description>Find all usage locations of a symbol</description>
    <when_to_use>
      - Before refactoring or changing a function
      - Understanding impact scope
      - Tracing data flow
    </when_to_use>
  </tool>
  
  <tool name="list_symbols_with_prefix">
    <description>Discover related symbols and naming patterns</description>
    <when_to_use>
      - Code exploration and discovery
      - Finding related functions
      - Understanding naming conventions
    </when_to_use>
  </tool>

  <tool name="search_pattern">
    <description>Pattern matching in source code</description>
    <when_to_use>
      - Finding specific code constructs
      - Debugging and investigation
      - Understanding coding patterns
    </when_to_use>
  </tool>
</tools>

**== Built-in Analysis Prompts ==**
The MCP server provides guided analysis prompts:
- `analyze-codebase`: General codebase analysis workflow
- `find-function`: Systematic function analysis
- `code-navigation`: Navigation strategies
- `refactoring-analysis`: Pre-refactoring impact analysis

**== Recommended Workflow ==**
1. Use prompts to get systematic guidance
2. Start with get_definition for target symbols
3. Use get_references for impact analysis
4. Explore with list_symbols_with_prefix
5. Deep dive with search_pattern